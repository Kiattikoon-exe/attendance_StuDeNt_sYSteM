<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <meta name="description" content />
  <meta name="author" content />
  <title>manage</title>
  <!-- Favicon-->
  <link rel="icon" type="image/x-icon" href="assets/favicon.ico" />
  <!-- Custom Google font-->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@100;200;300;400;500;600;700;800;900&amp;display=swap" rel="stylesheet" />
  <!-- Bootstrap icons-->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css" rel="stylesheet" />
  <!-- Core theme CSS (includes Bootstrap)-->
  <link href="css/styles.css" rel="stylesheet" />
  <style>
    .table-responsive {
  height: 300px; /* Adjust the height as needed */
  overflow-y: scroll;
}
    .sidebar {
      height: 100vh;
      background-color: #f8f9fa;
      padding-top: 20px;
    }

    .sidebar .nav-link {
      color: #333;
    }

    .sidebar .nav-link:hover {
      background-color: #e9ecef;
    }

    .sidebar .nav-link.active {
      background-color: #0d6efd;
      color: white;
    }

    .main-content {
      padding: 20px;
    }

    .swal-update-container {
      /* Overall container styling */
      background-color: #f5f5f5;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .swal-update-popup {
      /* Popup styling */
      max-width: 500px;
    }

    .swal-input-group {
      /* Input group styling */
      margin-bottom: 10px;
    }

    .swal2-input {
      /* Input field styling */
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 3px;
    }

    .swal2-select {
      /* Select field styling */
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 3px;
    }

    .swal2-button {
      /* Button styling */
      padding: 10px 20px;
      background-color: #007bff;
      color: #fff;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    .swal2-button--confirm {
      /* Confirm button styling */
      background-color: #28a745;
    }

    .swal2-button--cancel {
      /* Cancel button styling */
      background-color: #6c757d;
    }
  </style>
</head>

<body>
  <main class="flex-shrink-0">
    <div class="container-fluid">
      <div class="row flex-nowrap">
        <!-- Sidebar -->
        <%- include('include/sidebar.ejs') %>

        <!-- Main content -->
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h1 class="h2">Students Management</h1>
          </div>
  
          <form action="/addStudent" method="POST">
            <div class="row">
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="firstName" class="form-label">First Name</label>
                  <input type="text"   
   class="form-control" id="firstName" name="firstName" required />
                </div>
                <div class="mb-3">
                  <label for="lastName" class="form-label">Last Name</label>
                  <input type="text" class="form-control" id="lastName" name="lastName" required />
                </div>
                <div class="mb-3">
                  <label for="email" class="form-label">Email</label>
                  <input type="email" class="form-control" id="email" name="email" required />
                </div>
                <div class="mb-3">
                  <label for="telephone"   
   class="form-label">Telephone</label>
                  <input type="text" class="form-control" id="telephone" name="telephone" />
                </div>   
  
              </div>
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="sex" class="form-label">Sex</label>
                  <select id="sex" name="sex" class="form-select" required>
                    <option value="M">Male</option>
                    <option value="F">Female</option>
                  </select>
                </div>
                <div class="mb-3">
                  <label for="prefixId"   
   class="form-label">Prefix ID</label>
                  <input type="text" class="form-control" id="prefixId" name="prefixId" required />
                </div>
                <div class="mb-3">
                  <label for="curriculumId" class="form-label">Curriculum ID</label>
                  <select id="curriculumId" name="curriculumId" class="form-select" required>
                    <% curriculums.forEach(curriculum => { %>
                    <option value="<%= curriculum.id %>"><%= curriculum.curr_name_en %></option>
                    <% }) %>
                  </select>
                </div>
                <div class="mb-3">
                  <label for="dateOfBirth" class="form-label">Date of Birth</label>
                  <input type="date" class="form-control"   
   id="dateOfBirth" name="date_birth"   
   required />
                </div>
              </div>
            </div>
            <button type="submit" class="btn btn-primary">Add Student</button>
          </form>
  
          <section class="py-5 bg-light">
            <div class="container px-5">
              <div class="table-responsive">
                <table class="table table-striped table-sm">
                  <thead>
                    <tr>
                      <th>Student ID</th>
                      <th>Name</th>
                      <th>Curriculum</th>
                      <th>Email</th>
                      <th>Telephone</th>
                      <th>Date of Birth</th>
                      <th>Sex</th>
                      <th>Edit</th>
                      <th>Delete</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% students.forEach(student => { %>
                    <tr>
                      <td>
                        <%= prefixes.find(prefix => prefix.id === student.prefix_id)?.prefix %>
                      </td>
                      <td><%= student.firstname %> <%= student.lastname %></td>
                      <td>
                        <%= curriculums.find(curriculum => curriculum.id === student.curriculum_id)?.curr_name_en %>
                      </td>
                      <td><%= student.email %></td>
                      <td><%= student.telephone %></td>
                      <td>
                        <% const dateOfBirthString = student.date_birth; %>
                        <% const dateOfBirthObject = new Date(dateOfBirthString); %>
                        <% const formattedDate = dateOfBirthObject.toLocaleDateString('th-TH', { timeZone: 'Asia/Bangkok' }); %>
                        <%= formattedDate %>
                      </td>
                      <td><%= student.sex %></td>
                      <td>
                        <form action="/updateStudent" method="POST" class="d-inline-block btn-primary btn-sm">
                          <input type="hidden" name="id" value="<%= student.id %>" />
                          <input type="hidden" name="firstname" value="<%= student.firstname %>" />
                          <input type="hidden" name="lastname"   
   value="<%= student.lastname %>" />
                          <input type="hidden" name="email"   
   value="<%= student.email %>" />
                          <input type="hidden" name="telephone" value="<%= student.telephone %>" />
                          <input type="hidden" name="sex" value="<%= student.sex %>" />
                          <input type="hidden" name="date_birth" value="<%= student.date_birth %>" />
                          <input type="hidden" name="curriculum_id" value="<%= student.curriculumId %>" />
                          <button type="button" class="btn btn-primary update-student-btn" data-student-id="<%= student.id %>">Update</button>
                        </form>
                      </td>
                      <td>
                        <form action="/deleteStudent" method="POST" class="d-inline-block btn-danger btn-sm">
                          <input type="hidden" name="id" value="<%= student.id %>" />
                          <button type="submit" class="btn btn-danger delete-student-btn">Delete</button>
                        </form>
                      </td>
                    </tr>
                    <% }); %>
                  </tbody>
                </table>
              </div>
            </div>
          </section>
        </main>
      </div>
    </div>
  </main>
  <script>
    const deleteStudentBtns = document.querySelectorAll(
      ".delete-student-btn"
    );
    const updateStudentBtns = document.querySelectorAll(
      ".update-student-btn"
    );

    deleteStudentBtns.forEach((btn) => {
      btn.addEventListener("click", async (event) => {
        event.preventDefault(); // Prevent the form from being submitted the default way

        const studentForm = event.currentTarget.closest("form");
        const studentIdInput = studentForm.querySelector('input[name="id"]');
        const id = studentIdInput.value; // Get the student ID from the hidden input

        // SweetAlert2 confirmation dialog
        const confirmation = await Swal.fire({
          title: "Are you sure you want to delete this student?",
          text: "This action cannot be undone!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, delete",
        });

        if (confirmation.isConfirmed) {
          try {
            const response = await fetch("/deleteStudent", {
              method: "POST",
              body: JSON.stringify({
                id,
              }), // Send the student ID as JSON
              headers: {
                "Content-Type": "application/json",
              },
            });

            if (response.ok) {
              const data = await response.json();
              if (data.success) {
                Swal.fire(
                  "Deleted!",
                  "The student has been deleted.",
                  "success"
                );
                // Optionally remove the student row from the table
                studentForm.closest("tr").remove();
              } else {
                Swal.fire("Error", data.message, "error");
              }
            } else {
              Swal.fire("Error", "Unable to delete student.", "error");
            }
          } catch (error) {
            Swal.fire("Error", "An error occurred during deletion.", "error");
          }
        }
      });
    });

    updateStudentBtns.forEach((btn) => {
      btn.addEventListener("click", async (event) => {
        event.preventDefault();

        const studentId = event.currentTarget.getAttribute("data-student-id");

        // Fetch the student's details and curriculum list
        const response = await fetch(`/getStudentDetails/${studentId}`);
        const data = await response.json();

        if (data.success) {
          const student = data.student;
          const curriculums = data.curriculums;
          const formattedDate = student.date_birth ?
            new Date(student.date_birth).toISOString().split("T")[0] :
            "";
          // Prepare the curriculum options for the select dropdown
          let curriculumOptions = "";
          curriculums.forEach((curriculum) => {
            curriculumOptions += `
          <option value="${curriculum.id}" ${
                student.curriculum_id == curriculum.id ? "selected" : ""
              }>
            ${curriculum.curr_name_en}
          </option>
        `;
          });

          // SweetAlert2 form for updating student info
          const {
            value: formValues
          } = await Swal.fire({
            title: "Update Student Information",
            html: `
    <div class="swal-update-form">
      <div class="swal-input-group">
        <label for="swal-input1">ชื่อจริง</label>
        <input id="swal-input1" class="swal2-input" type="text" value="${
          student.firstname
        }" required>
      </div>
      <div class="swal-input-group">
        <label for="swal-input2">นามสกุล</label>
        <input id="swal-input2" class="swal2-input" type="text" value="${
          student.lastname
        }" required>
      </div>
      <div class="swal-input-group">
        <label for="swal-input3">Email</label>
        <input id="swal-input3" class="swal2-input" type="email" value="${
          student.email
        }" required>
      </div>
      <div class="swal-input-group">
        <label for="swal-input4">Telephone</label>
        <input id="swal-input4" class="swal2-input" type="tel" value="${
          student.telephone
        }" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}"> </div>
      <div class="swal-input-group">
        <label for="swal-input5">Sex</label>
        <select id="swal-input5" class="swal2-select">
          <option value="M" ${
            student.sex === "M" ? "selected" : ""
          }>Male</option>
          <option value="F" ${
            student.sex === "F" ? "selected" : ""
          }>Female</option>
        </select>
      </div>
      <div class="swal-input-group">
        <label for="swal-input6">Date of Birth</label>
        <input id="swal-input6" class="swal2-input" type="date" value="${formattedDate}" required>
      </div>
      <div class="swal-input-group">
        <label for="swal-input7">Curriculum</label>
        <select id="swal-input7" class="swal2-select">
          ${curriculumOptions}
        </select>
      </div>
    </div>
  `,
            focusConfirm: false,
            showCancelButton: true,
            preConfirm: () => {
              return {
                firstname: document.getElementById("swal-input1").value,
                lastname: document.getElementById("swal-input2").value,
                email: document.getElementById("swal-input3").value,
                telephone: document.getElementById("swal-input4").value,
                sex: document.getElementById("swal-input5").value,
                date_birth: document.getElementById("swal-input6").value,
                curriculum_id: document.getElementById("swal-input7").value,
              };
            },
          });

          if (formValues) {
            try {
              // Send the updated data to the server
              const updateResponse = await fetch("/updateStudent", {
                method: "POST",
                body: JSON.stringify({
                  id: studentId,
                  firstname: formValues.firstname,
                  lastname: formValues.lastname,
                  email: formValues.email,
                  telephone: formValues.telephone,
                  sex: formValues.sex,
                  date_birth: formValues.date_birth,
                  curriculum_id: formValues.curriculum_id,
                }),
                headers: {
                  "Content-Type": "application/json",
                },
              });

              let updateData;
              const contentType = updateResponse.headers.get("content-type");
              if (
                contentType &&
                contentType.indexOf("application/json") !== -1
              ) {
                updateData = await updateResponse.json();
              } else {
                updateData = {
                  message: await updateResponse.text(),
                };
              }

              if (updateResponse.ok) {
                Swal.fire({
                  title: "Updated!",
                  text: "The student's information has been updated.",
                  icon: "success",
                  timer: 2000,
                  showConfirmButton: false,
                });

                setTimeout(() => {
                  window.location.reload();
                }, 3000); // This ensures a 2-second delay before reload, regardless of user interaction with the alert
              } else {
                throw new Error(
                  updateData.message || "An error occurred during the update."
                );
              }
            } catch (error) {
              console.error("Update error:", error);
              Swal.fire(
                "Error",
                error.message || "An unexpected error occurred",
                "error"
              );
            }
          }
        } else {
          Swal.fire("Error666", data.message, "error");
        }
        // console.log(formValues.firstname, formValues.lastname, formValues.email, formValues.telephone);
      });
    });
  </script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="js/user-management.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
</body>

</html>