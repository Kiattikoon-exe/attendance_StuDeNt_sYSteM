<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <meta name="description" content />
  <meta name="author" content />
  <title>Modern Business - Start Bootstrap Template</title>
  <!-- Favicon-->
  <link rel="icon" type="image/x-icon" href="assets/favicon.ico" />
  <!-- Custom Google font-->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link
    href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@100;200;300;400;500;600;700;800;900&amp;display=swap"
    rel="stylesheet" />
  <!-- Bootstrap icons-->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css" rel="stylesheet" />
  <!-- Core theme CSS (includes Bootstrap)-->
  <link href="css/styles.css" rel="stylesheet" />

  <style>
    .dashboard-buttons {
      display: grid;
      grid-template-columns: repeat(3);
      gap: 1rem;
      margin-top: 1rem;
    }

    .dashboard-button {
      padding: 2rem;
      font-size: 1rem;
      text-align: center;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 0.25rem;
      transition: all 0.2s ease-in-out;
      text-decoration: none;
      color: #212529;
    }

    .dashboard-button:hover {
      background-color: #e9ecef;
      cursor: pointer;
    }

    .table-responsive {
      height: 450px;
      /* Adjust the height as needed */
      overflow-y: scroll;
    }

    .scrollable {
      height: 240px;
      overflow-y: scroll;
    }
  </style>

</head>

<body class="d-flex flex-column">
  <main class="flex-shrink-0">


    <!-- HEADER TEACHER INCLUDE -->
    <%- include('include/headerTc.ejs') %>

      <section class="py-lg-1">
        <div class="px-5">
          <div class="bg-light rounded-4 py-5 px-5 px-md-5" id="login-form">
            <div class="text-center mb-2">

              <h1 class="fw-bolder">Student Management</h1>
              <p class="lead fw-normal text-muted mb-0">
                <%= teacherName %> <%= teacherName%> | <a href="/logout">Logout</a>
              </p>
            </div>

            <div class="row gx-7 justify-content-center">
              <!-- left -->
              <div class=" col-xl-2">
                <h2 class="section-header">Manage Section</h2>
                <form action="/addSection" method="POST">
                  <div class="mb-3 mt-lg-4">
                    <div class="text-lg-start ">เพิ่มกลุ่มเรียน</div>
                    <input type="text" class="form-control " id="section" name="section" required />
                  </div>
                  <button type="submit" class="btn btn-primary">Add Section</button>
                </form>

                <h2 class="mt-4">Section List</h2>
                <ul class="list-group scrollable">
                  <% sections.forEach(section=> { %>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                      Section: <%= section.section %>
                        <form action="/deleteSection" method="POST" class="float-end">
                          <input type="hidden" name="id" value="<%= section.id %>" />
                          <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>
                    </li>
                    <% }) %>
                </ul>
              </div>
              <!-- right-->
              <div class=" col-xl-10">
                <h2 class="section-header">รายชื่อนักศึกษา</h2>
                <div class="row">
                  <div class="col-6">
                    <div class="text-lg-start mb-1 m-3">
                        <select id="section-select" name="section">
                            <option value="">เลือกกลุ่มเรียน</option>
                            <% sections.forEach(section => { %>
                                <option value="<%= section.id %>"><%= section.section %></option>
                            <% }) %>
                        </select>
                          <button type="submit" id="add-section-btn">บันทึกกลุ่มเรียน</button>
                      </div>
                  </div>
                  <div class="col-6">
                    <div class="text-lg-end mb-1 m-3">
                      <select id="search-type">
                        <option value="">All</option>
                        <option value="id">ID</option>
                        <option value="name">Name</option>
                        <option value="curriculum">Curriculum</option>
                        <option value="section">Section</option>
                      </select>
                      <input type="search" id="student-search" placeholder=" <<<<<<<    Search by ">
                      <button type="submit" id="search-button">Search</button>
                    </div>
                  </div>
                </div>


                <div class="container-fluid mx-auto mt-1 ">
                  <div class="table-responsive">
                    <table class="table  table-hover">
                      <thead>
                        <tr>
                          <th><input type="checkbox" id="select-all"></th>
                          <th>กลุ่มเรียน</th>
                          <th>Student ID</th>
                          <th>Name</th>
                          <th>Curriculum</th>
                          <th>Email</th>
                          <th>Telephone</th>
                          <th>Date of Birth</th>
                          <th>Sex</th>
                          <th>Edit</th>
                          <th>Delete</th>
                        </tr>
                      </thead>
                      <tbody>
                      </tbody>
                      <tbody id="student-data">
                        <% students.forEach(student=> { %>
                          <tr>
                            <td><input type="checkbox" class="student-checkbox" data-student-id="<%= student.id %>">
                            </td>
                            <td>
                              <%= sections.find(section => section.id === studentList.find(list => list.student_id === student.id)?.section_id)?.section || 'N/A' %>
                            </td>
                            <!-- ตัวแปรจาก app.js /addStd (prefixes) ใช้ find เพื่อหา table prefix และสร้าง condition ให้ prefix.id ตรงกับ student.prefix_id ?(<<ที่ไหน) ที่ Column prefix -->
                            <td>
                              <%= prefixes.find(prefix=> prefix.id ===
                                student.prefix_id)?.prefix %>
                            </td>
                            <td>
                              <%= student.firstname %>
                                <%= student.lastname %>
                            </td>
                            <td>
                              <%= curriculums.find(curriculum=> curriculum.id ===
                                student.curriculum_id)?.curr_name_en %>
                            </td>
                            <td>
                              <%= student.email %>
                            </td>
                            <td>
                              <%= student.telephone%>
                            </td>
                            <td>
                              <% const dateOfBirthString=student.date_birth; %>
                                <% const dateOfBirthObject=new Date(dateOfBirthString); %>
                                  <% const formattedDate=dateOfBirthObject.toLocaleDateString('th-TH', {
                                    timeZone: 'Asia/Bangkok' }); %>
                                    <!-- , { timeZone: 'Asia/Bangkok' } ADD TIMEZONE -->
                                    <%= formattedDate %>
                            </td>
                            <td>
                              <%= student.sex %>
                            </td>
                            <td>
                              <form action="/updateStudent" method="POST" class="d-inline-block btn-primary btn-sm">
                                <input type="hidden" name="id" value="<%= student.id %>" />
                                <input type="hidden" name="firstname" value="<%= student.firstname %>" />
                                <input type="hidden" name="lastname" value="<%= student.lastname %>" />
                                <input type="hidden" name="email" value="<%= student.email %>" />
                                <input type="hidden" name="telephone" value="<%= student.telephone %>" />
                                <input type="hidden" name="sex" value="<%= student.sex %>" />
                                <input type="hidden" name="date_birth" value="<%= student.date_birth %>" />
                                <input type="hidden" name="curriculum_id" value="<%= student.curriculumId %>" />

                                <button type="button" class="btn btn-primary update-student-btn"
                                  data-student-id="<%= student.id %>">
                                  Update
                                </button>
                              </form>
                            </td>
                            <td>
                              <form action="/deleteStudent" method="POST" class="d-inline-block btn-danger btn-sm">
                                <input type="hidden" name="id" value="<%= student.id %>" />
                                <button type="submit" class="btn btn-danger delete-student-btn">
                                  Delete
                                </button>
                              </form>
                            </td>
                          </tr>
                          <% }); %>
                      </tbody>

                    </table>
                  </div>

                </div>
              

              </div>
            </div>

          </div>


           


      </section>
  </main>

  <!-- FOOTER INCLUDE -->
  <%- include('footer.ejs') %>
    <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle 'Select All' checkbox click
    document.getElementById('select-all').addEventListener('click', function() {
        const checkboxes = document.querySelectorAll('.student-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
        });
    });

    // Handle "บันทึกกลุ่มเรียน" (Save Section) button click
    document.getElementById('add-section-btn').addEventListener('click', async function() {
        // Get the selected section ID
        const sectionSelect = document.getElementById('section-select');
        const sectionId = sectionSelect.value;

        if (!sectionId) {
            Swal.fire({
                title: "แจ้งเตือน",
                text: "กรุณาเลือกกลุ่มเรียน",
                icon: "warning"
            });
            return;
        }

        // Get all selected student checkboxes
        const selectedCheckboxes = document.querySelectorAll('.student-checkbox:checked');
        const studentIds = Array.from(selectedCheckboxes).map(checkbox => 
            checkbox.getAttribute('data-student-id')
        );

        if (studentIds.length === 0) {
            Swal.fire({
                title: "แจ้งเตือน",
                text: "โปรดเลือกนักศึกษาอย่างน้อย 1 คน",
                icon: "warning"
            });
            return;
        }

        try {
            // Send API request to add students to section
            const response = await fetch('/addStudentsToSection', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    sectionId: parseInt(sectionId),
                    studentIds: studentIds
                })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    title: "สำเร็จ",
                    text: "เพิ่มนักศึกษาเข้ากลุ่มเรียนเรียบร้อยแล้ว",
                    icon: "success"
                }).then(() => {
                    // Refresh the page or update the UI
                    window.location.reload();
                });
            } else {
                throw new Error(data.message || 'Failed to add students to section');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: "เกิดข้อผิดพลาด",
                text: error.message || "เกิดข้อผิดพลาดในการเพิ่มนักศึกษาเข้ากลุ่มเรียน",
                icon: "error"
            });
        }
    });
});

// Add this function to remove duplicates while preserving attendance history
function getUniqueStudents(students) {
    const uniqueStudents = new Map();
    
    students.forEach(student => {
        // Use student ID as the key to prevent duplicates
        if (!uniqueStudents.has(student.id)) {
            uniqueStudents.set(student.id, student);
        }
    });
    
    return Array.from(uniqueStudents.values());
}
      document.getElementById('search-button').addEventListener('click', function () {
        const searchTerm = document.getElementById('student-search').value;
        const searchType = document.getElementById('search-type').value;

        // Send a search request to the server
        fetch(`/searchStudents?term=${searchTerm}&type=${searchType}`)
          .then(response => response.json())
          .then(data => {
            const tableBody = document.getElementById('student-data');
            tableBody.innerHTML = ''; // Clear previous results
            
            const uniqueStudents = getUniqueStudents(data);
            // If no students are found, show a message
            if (uniqueStudents.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="9" class="text-center">No students found</td></tr>';
                } else {
                    uniqueStudents.forEach(student => {
                        tableBody.innerHTML += `
                       <tr>
              <td><input type="checkbox" class="student-checkbox" data-student-id="${student.id}"></td>
              <td>${student.section || 'N/A'}</td>
              <td>${student.prefix}</td>
              <td>${student.firstname} ${student.lastname}</td>
              <td>${student.curriculum}</td>
              <td>${student.email}</td>
              <td>${student.telephone}</td>
              <td>${new Date(student.date_birth).toLocaleDateString('en-TH', { timeZone: 'Asia/Bangkok' })}</td>
              <td>${student.sex}</td>
              
              
              <td>
                <form action="/updateStudent" method="POST" class="d-inline-block btn-primary btn-sm">
                  <input type="hidden" name="id" value="${student.id}" />
                  <button type="button" class="btn btn-primary update-student-btn" data-student-id="${student.id}">
                    Update
                  </button>
                </form>
              </td>
              <td>
                <form action="/deleteStudent" method="POST" class="d-inline-block btn-danger btn-sm">
                  <input type="hidden" name="id" value="${student.id}" />
                  <button type="button" class="btn btn-danger delete-student-btn">
                    Delete
                  </button>
                </form>
              </td>
            </tr>
                        `;
                    });

              // Bind event listeners for the dynamically added update buttons
           
              bindUpdateEventListeners();

              // Bind event listeners for the dynamically added delete buttons
              bindDeleteEventListeners();
            }
          })
          .catch(error => {
            console.error('Error fetching students:', error);
          });
      });

      // Function to bind update buttons after search results are updated
      function bindUpdateEventListeners() {
        document.querySelectorAll('.update-student-btn').forEach(button => {
          button.addEventListener('click', async function (event) {
            event.preventDefault();

            const studentId = this.getAttribute('data-student-id');

            // Fetch the student's details and curriculum list
            const response = await fetch(`/getStudentDetails/${studentId}`);
            const data = await response.json();

            if (data.success) {
              const student = data.student;
              const curriculums = data.curriculums;
              const formattedDate = student.date_birth ? new Date(student.date_birth).toISOString().split('T')[0] : '';

              // SweetAlert2 form for updating student info
              const { value: formValues } = await Swal.fire({
                title: 'Update Student Information',
                html: `
            <div class="swal-update-form">
              <div><label for="swal-input1">First Name</label><input id="swal-input1" class="swal2-input" type="text" value="${student.firstname}" required></div>
              <div><label for="swal-input2">Last Name</label><input id="swal-input2" class="swal2-input" type="text" value="${student.lastname}" required></div>
              <div><label for="swal-input3">Email</label><input id="swal-input3" class="swal2-input" type="email" value="${student.email}" required></div>
              <div><label for="swal-input4">Telephone</label><input id="swal-input4" class="swal2-input" type="tel" value="${student.telephone}"></div>
              <div><label for="swal-input5">Sex</label><select id="swal-input5" class="swal2-select"><option value="M" ${student.sex === 'M' ? 'selected' : ''}>Male</option><option value="F" ${student.sex === 'F' ? 'selected' : ''}>Female</option></select></div>
              <div><label for="swal-input6">Date of Birth</label><input id="swal-input6" class="swal2-input" type="date" value="${formattedDate}" required></div>
              <div><label for="swal-input7">Curriculum</label><select id="swal-input7" class="swal2-select">
                ${curriculums.map(c => `<option value="${c.id}" ${student.curriculum_id == c.id ? 'selected' : ''}>${c.curr_name_en}</option>`).join('')}
              </select></div>
            </div>
          `,
                focusConfirm: false,
                showCancelButton: true,
                preConfirm: () => ({
                  firstname: document.getElementById('swal-input1').value,
                  lastname: document.getElementById('swal-input2').value,
                  email: document.getElementById('swal-input3').value,
                  telephone: document.getElementById('swal-input4').value,
                  sex: document.getElementById('swal-input5').value,
                  date_birth: document.getElementById('swal-input6').value,
                  curriculum_id: document.getElementById('swal-input7').value,
                })
              });

              if (formValues) {
                // Send the updated data to the server
                const updateResponse = await fetch('/updateStudent', {
                  method: 'POST',
                  body: JSON.stringify({
                    id: studentId,
                    ...formValues
                  }),
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                if (updateResponse.ok) {
                  Swal.fire('Updated!', "The student's information has been updated.", 'success').then(() => {
                    window.location.reload(); // Reload after successful update
                  });
                } else {
                  Swal.fire('Error', 'Unable to update student.', 'error');
                }
              }
            } else {
              Swal.fire('Error', data.message, 'error');
            }
          });
        });
      }
      bindUpdateEventListeners();

      // Function to bind delete buttons after search results are updated
      function bindDeleteEventListeners() {
        document.querySelectorAll('.delete-student-btn').forEach(button => {
          button.addEventListener('click', async function (event) {
            event.preventDefault();

            const studentForm = event.currentTarget.closest('form');
            const studentIdInput = studentForm.querySelector('input[name="id"]');
            const id = studentIdInput.value; // Get the student ID from the hidden input

            // SweetAlert2 confirmation dialog
            const confirmation = await Swal.fire({
              title: 'Are you sure?',
              text: 'You won\'t be able to revert this!',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, delete it!'
            });

            if (confirmation.isConfirmed) {
              try {
                const response = await fetch('/deleteStudent', {
                  method: 'POST',
                  body: JSON.stringify({ id }), // Send the student ID as JSON
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                if (response.ok) {
                  const data = await response.json();
                  if (data.success) {
                    Swal.fire('Deleted!', 'The student has been deleted.', 'success');
                    studentForm.closest('tr').remove(); // Remove the student row from the table
                  } else {
                    Swal.fire('Error', data.message, 'error');
                  }
                } else {
                  Swal.fire('Error', 'Unable to delete student.', 'error');
                }
              } catch (error) {
                Swal.fire('Error', 'An error occurred during deletion.', 'error');
              }
            }
          });
        });
      }
      bindDeleteEventListeners();

    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="js/user-management.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"></script>
</body>

</html>